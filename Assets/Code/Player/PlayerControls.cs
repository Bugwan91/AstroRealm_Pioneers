//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Code/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Ship Controls"",
            ""id"": ""a5c9d77c-096b-4d4a-a38b-cf697a1cc203"",
            ""actions"": [
                {
                    ""name"": ""StrafeZ"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e619ac3f-2a4f-4364-b9a2-e4a8f9cb3745"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StrafeX"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9c01b184-f5d3-44c2-b23c-44dfddf2420d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InertialDamper"",
                    ""type"": ""Button"",
                    ""id"": ""e3ae109b-8542-444a-bff5-16b94bb7d6b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""80eed2d9-5b69-406e-ab5f-e219e40d71a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""fe6883e3-ff01-4371-9a15-ba5f442d9249"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StrafeZ"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d77fc5f5-d378-457d-902c-653d6550b285"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StrafeZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""60931582-c054-4e36-aec1-851d91dc2169"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StrafeZ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""e0b8a5dd-05fe-40a7-a1ae-7432493ae6f5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StrafeX"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b255853a-3ede-46f5-b2d3-d0e83abd41e5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StrafeX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2a2e3057-5cd7-498f-92ae-d25899e4029b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StrafeX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""631c4216-3a8a-40a6-b0b0-99d2c2ac2ad4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InertialDamper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9629e2e3-1098-48db-a6d0-9743d4fa840f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera Controls"",
            ""id"": ""ab6f15d5-b087-4a6d-a2ff-eee493332766"",
            ""actions"": [
                {
                    ""name"": ""YAxis"",
                    ""type"": ""Value"",
                    ""id"": ""8727092d-8b98-4f7c-b3e8-04dde9c5bee7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""XAxis"",
                    ""type"": ""Value"",
                    ""id"": ""2bbbbb03-c325-43da-bf81-ea36285c87a3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""074a05a1-f2f6-46d9-ba4a-825e68e439dd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FreeLook"",
                    ""type"": ""Button"",
                    ""id"": ""10c52fa1-5f6e-49c0-ae68-89957293df9d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6c6d98b3-36f2-41f1-85ed-af07a884038c"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""YAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92f4eddb-c69d-4ee5-8abb-8c0b0ba3f6e6"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""XAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce31e0ea-4b27-4d64-b616-5a3dd1a9ee64"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26cb6608-c090-49dd-9fc4-c96fd4896b0f"",
                    ""path"": ""<Keyboard>/leftAlt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FreeLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ship Controls
        m_ShipControls = asset.FindActionMap("Ship Controls", throwIfNotFound: true);
        m_ShipControls_StrafeZ = m_ShipControls.FindAction("StrafeZ", throwIfNotFound: true);
        m_ShipControls_StrafeX = m_ShipControls.FindAction("StrafeX", throwIfNotFound: true);
        m_ShipControls_InertialDamper = m_ShipControls.FindAction("InertialDamper", throwIfNotFound: true);
        m_ShipControls_Fire = m_ShipControls.FindAction("Fire", throwIfNotFound: true);
        // Camera Controls
        m_CameraControls = asset.FindActionMap("Camera Controls", throwIfNotFound: true);
        m_CameraControls_YAxis = m_CameraControls.FindAction("YAxis", throwIfNotFound: true);
        m_CameraControls_XAxis = m_CameraControls.FindAction("XAxis", throwIfNotFound: true);
        m_CameraControls_Scroll = m_CameraControls.FindAction("Scroll", throwIfNotFound: true);
        m_CameraControls_FreeLook = m_CameraControls.FindAction("FreeLook", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ship Controls
    private readonly InputActionMap m_ShipControls;
    private List<IShipControlsActions> m_ShipControlsActionsCallbackInterfaces = new List<IShipControlsActions>();
    private readonly InputAction m_ShipControls_StrafeZ;
    private readonly InputAction m_ShipControls_StrafeX;
    private readonly InputAction m_ShipControls_InertialDamper;
    private readonly InputAction m_ShipControls_Fire;
    public struct ShipControlsActions
    {
        private @PlayerControls m_Wrapper;
        public ShipControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @StrafeZ => m_Wrapper.m_ShipControls_StrafeZ;
        public InputAction @StrafeX => m_Wrapper.m_ShipControls_StrafeX;
        public InputAction @InertialDamper => m_Wrapper.m_ShipControls_InertialDamper;
        public InputAction @Fire => m_Wrapper.m_ShipControls_Fire;
        public InputActionMap Get() { return m_Wrapper.m_ShipControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShipControlsActions set) { return set.Get(); }
        public void AddCallbacks(IShipControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ShipControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShipControlsActionsCallbackInterfaces.Add(instance);
            @StrafeZ.started += instance.OnStrafeZ;
            @StrafeZ.performed += instance.OnStrafeZ;
            @StrafeZ.canceled += instance.OnStrafeZ;
            @StrafeX.started += instance.OnStrafeX;
            @StrafeX.performed += instance.OnStrafeX;
            @StrafeX.canceled += instance.OnStrafeX;
            @InertialDamper.started += instance.OnInertialDamper;
            @InertialDamper.performed += instance.OnInertialDamper;
            @InertialDamper.canceled += instance.OnInertialDamper;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(IShipControlsActions instance)
        {
            @StrafeZ.started -= instance.OnStrafeZ;
            @StrafeZ.performed -= instance.OnStrafeZ;
            @StrafeZ.canceled -= instance.OnStrafeZ;
            @StrafeX.started -= instance.OnStrafeX;
            @StrafeX.performed -= instance.OnStrafeX;
            @StrafeX.canceled -= instance.OnStrafeX;
            @InertialDamper.started -= instance.OnInertialDamper;
            @InertialDamper.performed -= instance.OnInertialDamper;
            @InertialDamper.canceled -= instance.OnInertialDamper;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(IShipControlsActions instance)
        {
            if (m_Wrapper.m_ShipControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShipControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ShipControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShipControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShipControlsActions @ShipControls => new ShipControlsActions(this);

    // Camera Controls
    private readonly InputActionMap m_CameraControls;
    private List<ICameraControlsActions> m_CameraControlsActionsCallbackInterfaces = new List<ICameraControlsActions>();
    private readonly InputAction m_CameraControls_YAxis;
    private readonly InputAction m_CameraControls_XAxis;
    private readonly InputAction m_CameraControls_Scroll;
    private readonly InputAction m_CameraControls_FreeLook;
    public struct CameraControlsActions
    {
        private @PlayerControls m_Wrapper;
        public CameraControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @YAxis => m_Wrapper.m_CameraControls_YAxis;
        public InputAction @XAxis => m_Wrapper.m_CameraControls_XAxis;
        public InputAction @Scroll => m_Wrapper.m_CameraControls_Scroll;
        public InputAction @FreeLook => m_Wrapper.m_CameraControls_FreeLook;
        public InputActionMap Get() { return m_Wrapper.m_CameraControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICameraControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Add(instance);
            @YAxis.started += instance.OnYAxis;
            @YAxis.performed += instance.OnYAxis;
            @YAxis.canceled += instance.OnYAxis;
            @XAxis.started += instance.OnXAxis;
            @XAxis.performed += instance.OnXAxis;
            @XAxis.canceled += instance.OnXAxis;
            @Scroll.started += instance.OnScroll;
            @Scroll.performed += instance.OnScroll;
            @Scroll.canceled += instance.OnScroll;
            @FreeLook.started += instance.OnFreeLook;
            @FreeLook.performed += instance.OnFreeLook;
            @FreeLook.canceled += instance.OnFreeLook;
        }

        private void UnregisterCallbacks(ICameraControlsActions instance)
        {
            @YAxis.started -= instance.OnYAxis;
            @YAxis.performed -= instance.OnYAxis;
            @YAxis.canceled -= instance.OnYAxis;
            @XAxis.started -= instance.OnXAxis;
            @XAxis.performed -= instance.OnXAxis;
            @XAxis.canceled -= instance.OnXAxis;
            @Scroll.started -= instance.OnScroll;
            @Scroll.performed -= instance.OnScroll;
            @Scroll.canceled -= instance.OnScroll;
            @FreeLook.started -= instance.OnFreeLook;
            @FreeLook.performed -= instance.OnFreeLook;
            @FreeLook.canceled -= instance.OnFreeLook;
        }

        public void RemoveCallbacks(ICameraControlsActions instance)
        {
            if (m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraControlsActions @CameraControls => new CameraControlsActions(this);
    public interface IShipControlsActions
    {
        void OnStrafeZ(InputAction.CallbackContext context);
        void OnStrafeX(InputAction.CallbackContext context);
        void OnInertialDamper(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
    public interface ICameraControlsActions
    {
        void OnYAxis(InputAction.CallbackContext context);
        void OnXAxis(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
        void OnFreeLook(InputAction.CallbackContext context);
    }
}
